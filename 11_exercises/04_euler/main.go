package main

import (
	"fmt"
	"math"
)

//Finds number of divisors in number n
func divisors(n float64) int {
	var divisors []int
	for i := 1; i <= int(math.Sqrt(n)); i++ {
		if int(n)%i == 0 {
			divisors = append(divisors, i)
		}
	}
	return len(divisors)
}

//Finds the n-th triangle number
func triangles(n int) int {
	return n * (n + 1) / 2
}

//Finds the smallest triangle number with n divisors
func test(n int) int {
	var smallest int
	for i := 1; i < 1000000; i++ {
		if divisors(float64(triangles(i))) >= n {
			smallest = triangles(i)
			break
		}
	}
	return smallest
}

//Runs test for n=500
func main() {
	fmt.Println(test(500))
}

/*The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/
